service: spend-daily

frameworkVersion: ">=1.21.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-west-2
  environment:
    DB_USER: ${self:custom.databaseUser}
    DB_PASSWORD: ${self:custom.databasePassword}
    DB_HOST:
      Fn::GetAtt: [GlobalDatabase, Endpoint.Address]
    DB_PORT:
      Fn::GetAtt: [GlobalDatabase, Endpoint.Port]
    DB_NAME: ${self:custom.databaseName}
    STAGE: ${opt:stage}

plugins:
  - serverless-offline
  - serverless-webpack

custom:
  serverless-offline:
    port: 4000
  webpackIncludeModules: true
  databaseUser: ${env:DB_USER, "spend"}
  databasePassword: ${env:DB_PASSWORD, ""}
  databaseHost: ${env:DB_HOST, "localhost"}
  databaseName: ${env:DB_NAME, "spend"}

functions:
  graphql:
    handler: graphql/index.default
    events:
    - http:
        authorizer:
          arn: arn:aws:cognito-idp:us-west-2:181782121001:userpool/us-west-2_1iKeHP5lG
        cors: true
        method: post
        path: graphql

  postUserConfirmation:
    handler: post-user-confirmation/index.default
    events:
    - cognitoUserPool:
        pool: UserPool
        trigger: PostConfirmation

  preTokenCreation:
    handler: pre-token-creation/index.default

  playground:
    handler: handler.playgroundHandler
    events:
    - http:
        cors: true
        method: get
        path: playground

  graphiql:
    handler: handler.graphiqlHandler
    events:
    - http:
        cors: true
        method: get
        path: graphiql

resources:
  Resources:
    GlobalDatabase:
      Type: AWS::RDS::DBInstance
      Properties:
        AllocatedStorage: 20
        AvailabilityZone: us-west-2a
        BackupRetentionPeriod: 7
        DBInstanceClass: db.t2.micro
        DBInstanceIdentifier: spend-db
        DBName: ${self:custom.databaseName}
        Engine: postgres
        EngineVersion: 9.6.3
        MasterUsername: ${self:custom.databaseUser}
        MasterUserPassword: ${self:custom.databasePassword}
    CognitoUserPoolUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: UserPool
    WebApplication:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: WebApplication
        GenerateSecret: false
        UserPoolId:
          Ref: CognitoUserPoolUserPool
